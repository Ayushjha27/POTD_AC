// leetcode -> https://leetcode.com/problems/number-of-good-pairs/

class Solution
{
public:
    int numIdenticalPairs(vector<int> &nums)
    {
        /*  Brute force
         int count = 0, size = nums.size();

         for (int i = 0; i < size - 1; i++) // iterate from i = 0 to size-1
         {
             for (int j = i + 1; j < size; j++) // iterate from j = i+1 to size
             {
                 if (nums[i] == nums[j])
                     count++;
             }
         }
         return count;
           // The time complexity of this code is O(n^2).

           // The space complexity of this code is O(1).
      */

        unordered_map<int, int> mp;
        int res = 0;

        for (int &it : nums)
        {
            res += mp[it];
            mp[it]++;
        }
        return res;
    }
    /*
    The time complexity of this code is O(n), where n is the size of the input array nums. This is because the code iterates through each element in the array once in the for loop.
    The space complexity of this code is O(n), where n is the number of unique elements in the input array nums. This is because the code uses an unordered_map to store the count of each element in nums.
  */
};